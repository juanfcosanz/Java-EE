<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<context:component-scan base-package="concursantes" />
	
	<aop:aspectj-autoproxy/>

	<!-- codigo equivalente en java a : Malabarista concursante1 = new Malabarista();

	<bean id="solei" class="concursantes.Malabarista">
		<constructor-arg value="10" />
	</bean>

	<bean id="sonetoSorJuana" class="concursantes.Soneto" />
	<bean id="soleiRecitador" class="concursantes.MalabaristaRecitador">
		<constructor-arg value="15" />
		<constructor-arg ref="sonetoSorJuana" />
	</bean>
	 -->
	 
	<!-- codigo musicp 
	<bean id="piano" class="concursantes.Piano" />

	<bean id="jasonPiano" class="concursantes.Musico">
		<property name="cancion" value="Noche de Paz" />
		<property name="instrumento" ref="piano" />
	</bean>
	-->
	<!-- cambio de instrumento -->
	<bean id="jasonSax" class="concursantes.Musico">
		<property name="cancion" value="Equinox" />
		<property name="instrumento">
			<!-- definimos un bean interno, esto se hace cuando no queremos compartir 
				un bean a todos los demas -->
			<bean class="concursantes.Saxofon" />
		</property>
	</bean>
	
	
		<!-- configuracion de AOP --> 
<!--  	<aop:config>    nos va a permitir configurar varios aspectos dentro de este applicationContext -->
<!--  		<aop:aspect ref="audiencia"> definimos un aspecto, aqui hacemos referencia a un bean de spring (en este caso a la clase Audiencia)  -->
		<!-- especifica el metodo que vamos a monitorear y le asociamos un identificador que nos servira para reutilizarlo -->
<!-- 			<aop:pointcut expression="execution(* concursantes.Concursante.ejecutar(..))" id="show" />   -->

		<!--  especificamos en que momento queremos que se ejecute la funcionalida de AOP --> 

		 <!-- metodos que deben de estar definidos en la clase de referencia -->
		<!-- metodos que se ejecutan antes del metodo obtetivo -->
<!-- 			<aop:before pointcut-ref="show" method="sentarse" /> -->
<!-- 			<aop:before pointcut-ref="show" method="apagarCelulares"/> -->
		<!-- metodo que se ejecuta depues de la ejecucion del metodo objetivo -->
<!-- 			<aop:after-returning pointcut-ref="show" method="aplaudir"/> -->
		<!-- si surgiera una excepcion se ejecuta este metodo -->
<!-- 			<aop:after-throwing pointcut-ref="show" method="devolucion"/> -->
<!-- 		</aop:aspect> -->
<!-- 	</aop:config> -->

<!-- configuracion de AOP con Aspect Around -->
<!-- 	<aop:config> -->
<!-- 		<aop:aspect ref="audiencia"> -->
<!-- 			<aop:pointcut expression="execution(* concursantes.Concursante.ejecutar(..))" id="show" /> -->
<!-- 			<aop:around pointcut-ref="show" method="monitorearShow"/> -->
<!-- 		</aop:aspect> -->
<!-- 	</aop:config> -->

</beans>
